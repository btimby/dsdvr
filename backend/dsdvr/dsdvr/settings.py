"""
Django settings for dsdvr project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from os.path import dirname
from os.path import join as pathjoin
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = dirname(dirname(os.path.abspath(__file__)))

# For webpack integration.
TEMPLATES_DIR = pathjoin(BASE_DIR, 'templates')
FRONTEND_DIR = pathjoin(dirname(dirname(BASE_DIR)), 'frontend')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%z5=*b6g7d&e$@ixxtt+2k978fkvd9w-u7(u!5uilzh*jt%jx5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'webpack_loader',
    'corsheaders',
    'constance',
    'constance.backends.database',

    'api',
    'main',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'api.middleware.DeviceMiddleware',
]

ROOT_URLCONF = 'dsdvr.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR, ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dsdvr.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': pathjoin(BASE_DIR, 'db.sqlite3'),
        'OPTIONS': {
            'timeout': 100,
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'


# Application settings:

# NOTE: Disabled due to UTF8 errors.
# REST_FRAMEWORK = {
#     'DEFAULT_RENDERER_CLASSES': (
#         'drf_ujson.renderers.UJSONRenderer',
#     ),
# }

SENTRY_DSN = 'https://63b215c310dc43c9bbb742c0a7ead929@sentry.io/1382666'

if DEBUG:
    CONSOLE_LOG_LEVEL = 'DEBUG'

else:
    CONSOLE_LOG_LEVEL = 'DEBUG'

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()]
    )

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(asctime)s [%(process)s:%(threadName).8s] '
                      '%(name)-12.12s %(levelname)-8s %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console',
            'level': CONSOLE_LOG_LEVEL,
        },
        # Add Handler for Sentry for `warning` and above
        # 'sentry': {
        #     'level': 'WARNING',
        #     'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
        # },
    },
    # root logger
    'loggers': {
        '': {
            'handlers': ['console'],
        },
    },
}

CRON = (
    ('*/5 * * * *', 'api.tasks.TaskCleanup'),
    ('* * * * *',   'api.tasks.recordings.TaskRecordingManager'),
    ('* * */8 * *',   'api.tasks.guide.TaskGuideDownload'),
)

# Allow application configuration to be edited in admin.
SITEPREFS_EXPOSE_MODEL_TO_ADMIN = False

WEBPACK_LOADER = {
    'DEFAULT': {
        'CACHE': DEBUG,
        'BUNDLE_DIR_NAME': '/bundles/',  # must end with slash
        'STATS_FILE': pathjoin(FRONTEND_DIR, 'webpack-stats.json'),
    }
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

AUTH_USER_MODEL = 'api.User'

CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'
CONSTANCE_CONFIG = {
    'GUIDE_METHOD': (os.environ.get('DSDVR_GUIDE_METHOD', 'manual'),
                     'How to obtain TV schedule data.'),
    'GUIDE_SD_USER': (os.environ.get('DSDVR_SD_USERNAME', ''),
                      'Schedules direct username.'),
    'GUIDE_SD_PASS': (os.environ.get('DSDVR_SD_PASSWORD', ''),
                      'Schedules direct password.'),
    'OMDB_API_KEY': (os.environ.get('DSDVR_OMDB_API_KEY', ''),
                     'API key for fetching media metadata.'),
    'STORAGE_MEDIA': (os.environ.get('DSDVR_STORAGE_MEDIA',
                                     '/var/tmp/dsdvr/media'),
                      'Where to store media files.'),
    'STORAGE_TEMP': (os.environ.get('DSDVR_STORAGE_TEMP', '/var/tmp/dsdvr'),
                     'Where to store temporary files.'),
}
