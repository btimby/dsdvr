# Generated by Django 2.1.7 on 2019-02-16 17:53

import api.models
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'abstract': False,
            },
            bases=(api.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('number', models.CharField(max_length=8)),
                ('name', models.CharField(max_length=8)),
                ('stream', models.CharField(max_length=256, null=True)),
                ('poster', models.URLField(max_length=256, null=True)),
                ('hd', models.BooleanField(default=False)),
            ],
            bases=(api.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('user_agent', models.TextField(unique=True)),
                ('last_ip_address', models.GenericIPAddressField(null=True)),
                ('device_brand', models.CharField(max_length=32, null=True)),
                ('device_family', models.CharField(max_length=32, null=True)),
                ('device_model', models.CharField(max_length=32, null=True)),
                ('os_family', models.CharField(max_length=32, null=True)),
                ('os_major', models.CharField(max_length=32, null=True)),
                ('os_minor', models.CharField(max_length=32, null=True)),
                ('os_patch', models.CharField(max_length=32, null=True)),
                ('os_patch_minor', models.CharField(max_length=32, null=True)),
                ('user_agent_family', models.CharField(max_length=32, null=True)),
                ('user_agent_major', models.CharField(max_length=32, null=True)),
                ('user_agent_minor', models.CharField(max_length=32, null=True)),
                ('user_agent_patch', models.CharField(max_length=32, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(api.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DeviceCursor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cursor', models.DecimalField(decimal_places=6, default=0.0, max_digits=12)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devicecursor', to='api.Device')),
            ],
            bases=(api.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.PositiveSmallIntegerField(null=True)),
                ('episode', models.PositiveSmallIntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('type', models.SmallIntegerField(choices=[(0, 'movies'), (1, 'shows'), (2, 'music')])),
                ('name', models.CharField(max_length=32, unique=True)),
                ('path', api.models.DirectoryPathField(auto_create=True, max_length=256, unique=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(api.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('type', models.SmallIntegerField(choices=[(0, 'Movie'), (1, 'Series'), (2, 'Show')])),
                ('title', models.CharField(max_length=256)),
                ('subtitle', models.CharField(max_length=256)),
                ('desc', models.TextField()),
                ('poster', models.URLField(max_length=256, null=True)),
                ('year', models.SmallIntegerField(null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(api.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MediaActor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(editable=False)),
            ],
            options={
                'abstract': False,
            },
            bases=(api.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('season', models.PositiveSmallIntegerField(null=True)),
                ('episode', models.PositiveSmallIntegerField(null=True)),
                ('title', models.CharField(max_length=256)),
                ('subtitle', models.CharField(max_length=256)),
                ('desc', models.TextField()),
                ('start', models.DateTimeField()),
                ('stop', models.DateTimeField()),
                ('duration', models.IntegerField()),
                ('poster', models.URLField(max_length=256, null=True)),
                ('previously_shown', models.BooleanField(default=True)),
            ],
            bases=(api.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ProgramActor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(editable=False)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Person')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Program')),
            ],
            options={
                'abstract': False,
            },
            bases=(api.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=16)),
            ],
            options={
                'abstract': False,
            },
            bases=(api.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Recording',
            fields=[
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('start', models.DateTimeField()),
                ('stop', models.DateTimeField()),
                ('status', models.SmallIntegerField(choices=[(0, 'none'), (1, 'recording'), (2, 'error'), (3, 'done')], default=0)),
                ('pid', models.IntegerField(null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(api.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=256)),
                ('value', models.CharField(max_length=256)),
            ],
            options={
                'abstract': False,
            },
            bases=(api.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Stream',
            fields=[
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('type', models.SmallIntegerField(choices=[(0, 'hls'), (1, 'raw')])),
                ('path', api.models.DirectoryPathField(max_length=256, null=True)),
                ('pid', models.IntegerField(null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(api.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Tuner',
            fields=[
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('ipaddr', models.GenericIPAddressField()),
                ('model', models.CharField(max_length=48)),
                ('tuner_count', models.SmallIntegerField()),
            ],
            options={
                'abstract': False,
            },
            bases=(api.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('media_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.Media')),
                ('width', models.SmallIntegerField(null=True)),
                ('height', models.SmallIntegerField(null=True)),
                ('video_enc', models.CharField(max_length=32, null=True)),
                ('size', models.IntegerField(null=True)),
                ('audio_enc', models.CharField(max_length=32, null=True)),
                ('duration', models.DecimalField(decimal_places=6, max_digits=12, null=True)),
                ('format', models.CharField(max_length=32, null=True)),
                ('play_count', models.IntegerField(default=0)),
                ('path', api.models.FilePathField(auto_create_parent=True, max_length=256, must_exist=False, relative_to='library.path')),
            ],
            options={
                'abstract': False,
            },
            bases=('api.media',),
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('media_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.Media')),
            ],
            options={
                'abstract': False,
            },
            bases=('api.media',),
        ),
        migrations.CreateModel(
            name='Show',
            fields=[
                ('media_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.Media')),
                ('width', models.SmallIntegerField(null=True)),
                ('height', models.SmallIntegerField(null=True)),
                ('video_enc', models.CharField(max_length=32, null=True)),
                ('size', models.IntegerField(null=True)),
                ('audio_enc', models.CharField(max_length=32, null=True)),
                ('duration', models.DecimalField(decimal_places=6, max_digits=12, null=True)),
                ('format', models.CharField(max_length=32, null=True)),
                ('play_count', models.IntegerField(default=0)),
                ('path', api.models.FilePathField(auto_create_parent=True, max_length=256, must_exist=False, relative_to='library.path')),
            ],
            options={
                'abstract': False,
            },
            bases=('api.media',),
        ),
        migrations.AddField(
            model_name='stream',
            name='media',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stream', to='api.Media'),
        ),
        migrations.AddField(
            model_name='recording',
            name='media',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recording', to='api.Media'),
        ),
        migrations.AddField(
            model_name='recording',
            name='program',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recording', to='api.Program'),
        ),
        migrations.AddField(
            model_name='program',
            name='actors',
            field=models.ManyToManyField(through='api.ProgramActor', to='api.Person'),
        ),
        migrations.AddField(
            model_name='program',
            name='categories',
            field=models.ManyToManyField(related_name='programs', to='api.Category'),
        ),
        migrations.AddField(
            model_name='program',
            name='channel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programs', to='api.Channel'),
        ),
        migrations.AddField(
            model_name='program',
            name='rating',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Rating'),
        ),
        migrations.AddField(
            model_name='mediaactor',
            name='media',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Media'),
        ),
        migrations.AddField(
            model_name='mediaactor',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Person'),
        ),
        migrations.AddField(
            model_name='media',
            name='actors',
            field=models.ManyToManyField(through='api.MediaActor', to='api.Person'),
        ),
        migrations.AddField(
            model_name='media',
            name='categories',
            field=models.ManyToManyField(related_name='media', to='api.Category'),
        ),
        migrations.AddField(
            model_name='media',
            name='library',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to='api.Library'),
        ),
        migrations.AddField(
            model_name='media',
            name='rating',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Rating'),
        ),
        migrations.AddField(
            model_name='devicecursor',
            name='stream',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devicecursor', to='api.Stream'),
        ),
        migrations.AddField(
            model_name='channel',
            name='tuner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channels', to='api.Tuner'),
        ),
        migrations.AddField(
            model_name='show',
            name='program',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shows', to='api.Program'),
        ),
        migrations.AddField(
            model_name='show',
            name='series',
            field=models.ManyToManyField(through='api.Episode', to='api.Series'),
        ),
        migrations.AlterUniqueTogether(
            name='program',
            unique_together={('channel', 'start'), ('channel', 'stop')},
        ),
        migrations.AddField(
            model_name='movie',
            name='program',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movies', to='api.Program'),
        ),
        migrations.AddField(
            model_name='episode',
            name='series',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Series'),
        ),
        migrations.AddField(
            model_name='episode',
            name='show',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Show', unique=True),
        ),
        migrations.AlterUniqueTogether(
            name='devicecursor',
            unique_together={('device', 'cursor')},
        ),
        migrations.AlterUniqueTogether(
            name='channel',
            unique_together={('tuner', 'number')},
        ),
    ]
